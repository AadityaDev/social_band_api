# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: social-band-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: '*'
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 'lambda:InvokeFunction'
            - 'lambda:InvokeAsync'
          Resource: 
            - '*'
  runtime: nodejs16.x
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  plugins:
  - serverless-offline
  stage: dev
  region: us-west-1
functions:
  privateAPI:
      handler: handler.private
      events:
        - http:
            path: user/private
            method: post
            cors: true
            authorizer:
              name: PrivateAuthorizer
              type: COGNITO_USER_POOLS
              arn:
                Fn::GetAtt:
                  - UserPool
                  - Arn
              claims:
                - email
  createUser:
    handler: handler.createUser
    events:
      - http:
          method: POST
          path: users
          cors: true
  readUser:
    handler: handler.readUser
    events:
      - http:
          method: GET
          path: users
          cors: true
  updateUser:
    handler: handler.updateUser
    events:
      - http:
          method: PUT
          path: users/{id}
          cors: true
  deleteUser:
    handler: handler.deleteUser
    events:
      - http:
          method: DELETE
          path: users/{id}
          cors: true
  createBandGroup:
    handler: handler.createBandGroup
    events:
      - http:
          method: POST
          path: bandgroup
          cors: true
  readBandGroup:
    handler: handler.readBandGroup
    events:
      - http:
          method: GET
          path: bandgroup
          cors: true
  updateBandGroup:
    handler: handler.updateBandGroup
    events:
      - http:
          method: PUT
          path: bandgroup/{id}
          cors: true
  deleteBandGroup:
    handler: handler.deleteBandGroup
    events:
      - http:
          method: DELETE
          path: bandgroup/{id}
          cors: true
  # hello:
  #   handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: 'users'
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          # - AttributeName: id
          #   AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          # - AttributeName: id
          #   KeyType: HASH
          - AttributeName: email
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 1
        #   WriteCapacityUnits: 1        
    BandGroupsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'bandgroup'
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Sub socialbandapp501dcc3a_userpool_501dcc3a-dev
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: !Sub social501dcc3a_app_client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ALLOW_CUSTOM_AUTH" 
          - "ALLOW_USER_SRP_AUTH"
          - "ALLOW_REFRESH_TOKEN_AUTH"

